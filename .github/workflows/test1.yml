name: Download File from EC2

on:
  workflow_dispatch:
    inputs:
      filename:
        description: 'File to download from EC2 (e.g., main.pdf)'
        required: true
        default: 'main.pdf' # Provide a sensible default, assuming a common PDF name

jobs:
  download_file:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List EC2 host and username (for verification, remove in production)
        run: |
          echo "Connecting to host: ${{ secrets.EC2_HOST }}"
          echo "Using username: ${{ secrets.EC2_USERNAME }}"
          echo "Attempting to download file: /home/ec2-user/latex_build/${{ github.event.inputs.filename }}"

      # (Optional) Add a step to verify file existence on EC2 before SCPing
      # This can help diagnose "No such file or directory" errors quickly
      - name: Verify file existence on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- UPDATED PATH HERE ---
            REMOTE_FILE_PATH="/home/ec2-user/latex_build/${{ github.event.inputs.filename }}"
            echo "Checking if file exists on EC2: $REMOTE_FILE_PATH"
            if [ -f "$REMOTE_FILE_PATH" ]; then
              echo "File found. Permissions: $(ls -l "$REMOTE_FILE_PATH" | awk '{print $1}')"
            else
              echo "Error: File '$REMOTE_FILE_PATH' not found on EC2 or insufficient permissions."
              # exit 1 # Uncomment this to fail the workflow if the file doesn't exist
            fi

      - name: SCP Download File from EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # --- UPDATED PATH HERE ---
          source: "/home/ec2-user/latex_build/${{ github.event.inputs.filename }}"
          target: "./"
          # tar_exec: "/usr/bin/tar" # Uncomment if you had issues with tar
          # debug: true

      - name: List downloaded files (for verification)
        run: ls -la

      - name: Upload downloaded file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-from-ec2
          path: ${{ github.event.inputs.filename }}
          retention-days: 5

      - name: Success Message
        run: echo "File ${{ github.event.inputs.filename }} successfully downloaded and uploaded as artifact!"
